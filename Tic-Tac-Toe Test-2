import random

def display_board(board):
    print(f" {board[0]} | {board[1]} | {board[2]} ")
    print("---+---+---")
    print(f" {board[3]} | {board[4]} | {board[5]} ")
    print("---+---+---")
    print(f" {board[6]} | {board[7]} | {board[8]} ")

def has_winner(board):
    winning_combinations = [
        (0, 1, 2), (3, 4, 5), (6, 7, 8),
        (0, 3, 6), (1, 4, 7), (2, 5, 8),
        (0, 4, 8), (2, 4, 6)
    ]
    
    for combo in winning_combinations:
        if board[combo[0]] == board[combo[1]] == board[combo[2]] != " ":
            return board[combo[0]]

  
    if " " not in board:
        return "Tie"

    return False  


def minimax(board, depth, is_maximizing_player, alpha=float('-inf'), beta=float('inf')):
    result = has_winner(board)

    if result:
        if result == "X":
            return -10 + depth
        elif result == "O":
            return 10 - depth
        return 0

    if is_maximizing_player:
        best_score = float('-inf')

        for i in range(len(board)):
            if board[i] == " ":
                board[i] = "O"
                score = minimax(board, depth + 1, False, alpha, beta)
                board[i] = " "  

                best_score = max(score, best_score)
                alpha = max(alpha, best_score)

                if beta <= alpha:
                    break   

        return best_score

    else:  
        best_score = float('inf')

        for i in range(len(board)):
            if board[i] == " ":
                board[i] = "X"
                score = minimax(board, depth + 1, True, alpha, beta)
                board[i] = " "  

                best_score = min(score, best_score)
                beta = min(beta, best_score)

                if beta <= alpha:
                    break  

        return best_score


def ai_move(board):
    best_move = None
    best_value = float('-inf')

    for i in range(len(board)):
        if board[i] == " ":
            board[i] = "O"  
            move_value = minimax(board, 0, False)  
            board[i] = " "  

            if move_value > best_value:  
                best_value = move_value
                best_move = i  

    return best_move  
